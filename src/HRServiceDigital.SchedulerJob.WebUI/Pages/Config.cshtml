@page
@{
    ViewData["Title"] = "Config";
}
<div id="app">
    <el-card>
        <el-button type="primary" size="mini" @@click="addJob">Add Job</el-button>
        <el-button type="primary" size="mini" @@click="addTrigger">Add Trigger</el-button>
        <el-button type="primary" size="mini" @@click="scheduleJob">Schedule Job</el-button>
        <el-button type="primary" size="mini" @@click="editJob">Edit Job</el-button>
        <el-button type="primary" size="mini" @@click="reschedule">Reschedule</el-button>
    </el-card>
    <el-table :data="jobData" ref="jobDataTable"
              stripe
              style="width: 100%">
        <el-table-column type="selection"></el-table-column>
        <el-table-column type="index" label="#"></el-table-column>
        <el-table-column prop="jobName"
                         label="Job Name"
                         min-width="120px">
        </el-table-column>
        <el-table-column prop="jobGroup"
                         label="Job Group">
        </el-table-column>
        <el-table-column prop="description"
                         label="Description">
        </el-table-column>
        <el-table-column prop="jobData"
                         label="Job Data"
                         min-width="150px">
        </el-table-column>
        <el-table-column label="Triggers">
            <template slot-scope="scope">
                <el-button type="primary" size="mini" @@click="showTriggers(scope.row)">Triggers</el-button>
            </template>
        </el-table-column>
    </el-table>



    <!--trigger dialog-->
    <el-dialog title="Scheduled Triggers"
               :visible.sync="triggerDialogVisible"
               width="80%">
        <el-table :data="scheduledTriggerData"
                  stripe
                  style="width: 100%">
            <el-table-column type="index" label="#"></el-table-column>
            <el-table-column prop="triggerName"
                             label="Trigger Name"
                             min-width="180px">
            </el-table-column>
            <el-table-column prop="triggerGroup"
                             label="Trigger Group"
                             min-width="90px">
            </el-table-column>
            <el-table-column prop="description"
                             label="Description"
                             min-width="150px">
            </el-table-column>
            <el-table-column prop="cronExpression"
                             label="Cron Expression"
                             min-width="120px">
            </el-table-column>
            <el-table-column>
                <template slot-scope="scope">
                    <el-button type="danger" size="mini" icon="el-icon-delete" circle @@click="removeTrigger(scope.row)"></el-button>
                </template>
            </el-table-column>
        </el-table>
        <span slot="footer" class="dialog-footer">
            <el-button size="small" @@click="triggerDialogVisible = false">Cancel</el-button>
        </span>
    </el-dialog>

    <!--Add new Job/Edit Job dialog-->
    <el-dialog title="Job Detail" :visible.sync="jobDialogVisible"
               width="60%">
        <el-form ref="jobForm" :model="jobDetailData" label-width="140px">
            <el-form-item label="Job Name" v-if="isEditJob">
                <el-span v-text="jobDetailData.jobName"></el-span>
            </el-form-item>
            <el-form-item label="Job Group">
                <el-input v-model="jobDetailData.jobGroup" clearable placeholder="Job Group"></el-input>
            </el-form-item>
            <el-form-item label="Description">
                <el-input v-model="jobDetailData.description" clearable placeholder="Job Description"></el-input>
            </el-form-item>
            <el-form-item label="Job Data">
                <el-input type="textarea" v-model="jobDetailData.jobData" clearable placeholder="Job Data Map"></el-input>
            </el-form-item>
        </el-form>
        <span slot="footer" class="dialog-footer">
            <el-button size="small" @@click="jobDialogVisible = false">Cancel</el-button>
            <el-button size="small" type="primary" @@click="saveAddJob" v-if="!isEditJob">Save Add</el-button>
            <el-button size="small" type="danger" @@click="deleteJob(jobDetailData.jobName, jobDetailData.jobGroup)" v-if="isEditJob">Delete</el-button>
            <el-button size="small" type="primary" @@click="saveJob" v-if="isEditJob">Save Changes</el-button>
        </span>
    </el-dialog>


    <!--Schedule Job dialog-->
    <el-dialog title="Scheduler Job" :visible.sync="scheduleJobDialogVisible"
               width="60%">
        <el-form ref="scheduleJobForm" :model="scheduledJobData" label-width="140px">
            <el-form-item label="Job Group">
                <el-input v-model="scheduledJobData.jobGroup" clearable placeholder="Job Group"></el-input>
            </el-form-item>
            <el-form-item label="Job Description">
                <el-input v-model="scheduledJobData.jobDescription" clearable placeholder="Job Description"></el-input>
            </el-form-item>
            <el-form-item label="Job Data">
                <el-input type="textarea" v-model="scheduledJobData.jobData" clearable placeholder="Job Data"></el-input>
            </el-form-item>
            <el-form-item label="Trigger Group">
                <el-input v-model="scheduledJobData.triggerGroup" clearable placeholder="Trigger Group"></el-input>
            </el-form-item>
            <el-form-item label="Trigger Description">
                <el-input v-model="scheduledJobData.triggerDescription" clearable placeholder="Trigger Description"></el-input>
            </el-form-item>
            <el-form-item label="Cron Expression">
                <el-input v-model="scheduledJobData.cronExpression" clearable placeholder="Cron Expression"></el-input>
            </el-form-item>
        </el-form>
        <el-form label-width="140px">
            <el-form-item label="Schedule Time">
                <template>
                    <el-time-picker v-model="scheduleTime"
                                    placeholder="Schedule time">
                    </el-time-picker>
                    <el-button type="primary" icon="el-icon-refresh" @@click="refreshCronExpression"></el-button>
                </template>
            </el-form-item>
            <el-form-item label-width="0">
                <el-tabs v-model="cronTab" tab-position="left">
                    <el-tab-pane name="daily" label="Daily">
                        <template>
                            <el-checkbox v-model="dailyCheck" label="Daily"></el-checkbox>
                        </template>
                    </el-tab-pane>
                    <el-tab-pane name="weekly" label="Weekly">
                        <template>
                            <el-checkbox-group v-model="checkedDaysInWeek" @@change="handleCheckedDaysChangeInWeek">
                                <el-checkbox v-for="day in weekly" :label="day" :key="day">{{day}}</el-checkbox>
                            </el-checkbox-group>
                        </template>
                    </el-tab-pane>
                    <el-tab-pane name="monthly" label="Monthly">
                        <template>
                            <el-checkbox-group v-model="checkedDaysInMonth" @@change="handleCheckedDaysChangeInMonth">
                                <el-checkbox v-for="day in monthly" :label="day" :key="day">{{day}}</el-checkbox>
                            </el-checkbox-group>
                        </template>
                    </el-tab-pane>
                </el-tabs>
            </el-form-item>
        </el-form>
        <span slot="footer" class="dialog-footer">
            <el-button size="small" @@click="scheduleJobDialogVisible = false">Cancel</el-button>
            <el-button size="small" type="primary" @@click="saveScheduleJob">Save Schedule Job</el-button>
        </span>
    </el-dialog>

    <!--Reschedule Job/Add Trigger dialog-->
    <el-dialog title="Amend Schedule Job" :visible.sync="rescheduleDialogVisible"
               width="60%">
        <el-form ref="jobForm" :model="scheduledJobData" label-width="140px">
            <el-form-item label="Job Name">
                <el-span v-text="scheduledJobData.jobName"></el-span>
            </el-form-item>
            <el-form-item label="Job Group">
                <el-span v-text="scheduledJobData.jobGroup"></el-span>
            </el-form-item>
            <el-form-item label="Job Description">
                <el-span v-text="scheduledJobData.jobDescription"></el-span>
            </el-form-item>
            <el-form-item label="Job Data">
                <el-span type="textarea" v-text="scheduledJobData.jobData"></el-span>
            </el-form-item>
            <el-form-item label="Trigger Name" v-if="isRescheduleJob">
                <el-span v-text="scheduledJobData.triggerName"></el-span>
            </el-form-item>
            <el-form-item label="Trigger Group">
                <el-input v-model="scheduledJobData.triggerGroup" clearable placeholder="Trigger Group"></el-input>
            </el-form-item>
            <el-form-item label="Trigger Description">
                <el-input v-model="scheduledJobData.triggerDescription" clearable placeholder="Trigger Description"></el-input>
            </el-form-item>
            <el-form-item label="Cron Expression">
                <el-input v-model="scheduledJobData.cronExpression" clearable placeholder="Cron Expression"></el-input>
            </el-form-item>
        </el-form>
        <el-form label-width="140px">
            <el-form-item label="Schedule Time">
                <template>
                    <el-time-picker v-model="scheduleTime"
                                    placeholder="Schedule time">
                    </el-time-picker>
                    <el-button type="primary" icon="el-icon-refresh" @@click="refreshCronExpression"></el-button>
                </template>
            </el-form-item>
            <el-form-item label-width="0">
                <el-tabs v-model="cronTab" tab-position="left">
                    <el-tab-pane name="daily" label="Daily">
                        <template>
                            <el-checkbox v-model="dailyCheck" label="Daily"></el-checkbox>
                        </template>
                    </el-tab-pane>
                    <el-tab-pane name="weekly" label="Weekly">
                        <template>
                            <el-checkbox-group v-model="checkedDaysInWeek" @@change="handleCheckedDaysChangeInWeek">
                                <el-checkbox v-for="day in weekly" :label="day" :key="day">{{day}}</el-checkbox>
                            </el-checkbox-group>
                        </template>
                    </el-tab-pane>
                    <el-tab-pane name="monthly" label="Monthly">
                        <template>
                            <el-checkbox-group v-model="checkedDaysInMonth" @@change="handleCheckedDaysChangeInMonth">
                                <el-checkbox v-for="day in monthly" :label="day" :key="day">{{day}}</el-checkbox>
                            </el-checkbox-group>
                        </template>
                    </el-tab-pane>
                </el-tabs>
            </el-form-item>
        </el-form>
        <span slot="footer" class="dialog-footer">
            <el-button size="small" @@click="rescheduleDialogVisible = false">Cancel</el-button>
            <el-button size="small" type="primary" @@click="addTriggerConfirm" v-if="!isRescheduleJob">Save Add</el-button>
            <el-button size="small" type="primary" @@click="doRescheduleJob" v-if="isRescheduleJob">Save Changes</el-button>
        </span>
    </el-dialog>
</div>
@section Scripts{
    <script type="text/javascript">
        const vm = new Vue({
            el: '#app',
            async created() {
                this.getJobData();
                this.getTriggerData();
            },
            data: {
                triggerDialogVisible: false,
                jobDialogVisible: false,
                isEditJob: false,
                isRescheduleJob: false,
                rescheduleDialogVisible: false,
                scheduleJobDialogVisible: false,
                schedulerClusters: [],
                jobData: [],
                triggerData: [],
                scheduledTriggerData: [],
                jobDetailData: {},
                scheduledJobData: {},
                scheduleTime: {},
                dailyCheck: false,
                weekly: ['SUN', 'MON', 'TUE', 'WED', 'THU', 'FRI', 'SAT'],
                monthly: ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30', '31', 'last'],
                checkedDaysInWeek: [],
                checkedDaysInMonth: [],
                cronTab:'daily'
            },
            methods: {
                handleCheckedDaysChangeInWeek() {

                },
                handleCheckedDaysChangeInMonth() {

                },
                refreshCronExpression() {
                    if (this.scheduleTime != null) {
                        var cronExpression = `${this.scheduleTime.getSeconds()} ${this.scheduleTime.getMinutes()} ${this.scheduleTime.getHours()} `;
                        var trigger = {};
                        switch (this.cronTab) {
                            case 'weekly':
                                trigger = this.checkedDaysInWeek;
                                cronExpression += '? * ';
                                cronExpression += trigger;
                                break;
                            case 'monthly':
                                trigger = this.checkedDaysInMonth;
                                cronExpression += trigger;
                                cronExpression += ' * ?';
                                break;
                            default:
                                trigger = 'Daily';
                                cronExpression += '* * ?';
                                break;
                        }
                        console.log(this.scheduledJobData);
                        console.log(cronExpression);
                        this.scheduledJobData.cronExpression = cronExpression;
                    }                    
                },
                handleClick(tab, event) {
                    console.log(tab, event);
                },
                async getJobData() {
                    const { status: status, data: data } = await this.$http.get('/api/services/quartz/Jobs');
                    if (status === 200) {
                        this.jobData = data;
                    }
                },
                async getTriggerData() {
                    const { status: status, data: data } = await this.$http.get('/api/services/quartz/Triggers');
                    if (status === 200) {
                        this.triggerData = data
                    }
                },
                showTriggers(row) {
                    this.scheduledTriggerData = [];
                    this.triggerData.forEach(x => {
                        if (x.jobName === row.jobName) {
                            this.scheduledTriggerData.push(x)
                        }
                    })
                    this.triggerDialogVisible = true;
                },
                addJob() {
                    this.isEditJob = false;
                    this.jobDetailData = {
                        jobGroup: 'DEFAULT'
                    };
                    this.jobDialogVisible = true;
                },
                async saveAddJob() {
                    const { status: status } = await this.$http.post('/api/services/quartz/Jobs', {
                        jobGroup: this.jobDetailData.jobGroup,
                        description: this.jobDetailData.description,
                        jobData: this.jobDetailData.jobData
                    });

                    if (status === 200) {
                        this.$message({
                            type: 'success',
                            message: 'New Job Created Successfully!',
                            offset: 60
                        });
                        this.getJobData();
                        this.jobDialogVisible = false;
                    } else {
                        this.$message({ type: 'error', message: 'Job Creation Failed!', offset: 60 });
                    }
                },
                editJob() {
                    this.isEditJob = true;
                    var selectedJobData = this.$refs.jobDataTable.selection
                    if (selectedJobData.length !== 1) {
                        this.$message.error('Please select one of the job data.');
                        return;
                    }

                    this.jobDetailData = selectedJobData[0]
                    this.jobDialogVisible = true
                },
                async saveJob() {
                    const { status: status } = await this.$http.put(
                        `/api/services/quartz/Jobs/${this.jobDetailData.jobName}/${this.jobDetailData.jobGroup}`, {
                        description: this.jobDetailData.description,
                        jobData: this.jobDetailData.jobData
                    });
                    if (status === 200) {
                        this.$message({ type: 'success', message: 'Job save Successfully!', offset: 60 });
                        this.getJobData();
                        this.jobDialogVisible = false;
                    } else {
                        this.$message({ type: 'error', message: 'Job save Failed!', offset: 60 });
                    }
                },
                addTrigger() {
                    this.isRescheduleJob = false;
                    var selectedJobData = this.$refs.jobDataTable.selection
                    if (selectedJobData.length !== 1) {
                        this.$message.error('Please select one of the job data.');
                        return;
                    }
                    var row = selectedJobData[0];

                    if (this.triggerData.findIndex(x => x.jobName === row.jobName) >= 0) {
                        this.$message({ type: 'error', message: 'The selected job has been assigned with trigger, no need to create more!', offset: 60 });
                        return;
                    }
                    this.scheduledJobData = {
                        jobName: row.jobName,
                        jobGroup: row.jobGroup,
                        jobDescription: row.description,
                        jobData: row.jobData,
                        triggerGroup: 'DEFAULT'
                    };
                    this.rescheduleDialogVisible = true;
                },
                async addTriggerConfirm() {
                    const { status: status } = await this.$http.post('/api/services/quartz/Triggers', {
                        triggerGroup: this.scheduledJobData.triggerGroup,
                        jobName: this.scheduledJobData.jobName,
                        jobGroup: this.scheduledJobData.jobGroup,
                        description: this.scheduledJobData.triggerDescription,
                        cronExpression: this.scheduledJobData.cronExpression
                    });

                    if (status === 200) {
                        this.$message({ type: 'success', message: 'Add Trigger Successfully!', offset: 60 });
                        this.getJobData();
                        this.getTriggerData();
                        this.rescheduleDialogVisible = false;
                    } else {
                        this.$message({ type: 'error', message: 'Add Trigger Failed!', offset: 60 });
                    }
                },
                deleteJob(name, group) {
                    this.$confirm('Are you going to delete the job as well as associated triggers?', 'Notice', {
                        confirmButtonText: 'Yes',
                        cancelButtonText: 'Cancel',
                        type: 'warning'
                    }).then(async () => {
                        const { status: status } = await this.$http.delete(`/api/services/quartz/Jobs/${name}/${group}`);
                        if (status === 200) {
                            this.$message({
                                type: 'success',
                                message: 'Delete Job Successfully!',
                                offset: 60
                            });
                            this.getJobData();
                            this.getTriggerData();
                            this.jobDialogVisible = false;
                        } else {
                            this.$message({ type: 'error', message: 'Delete Job Failed!', offset: 60 });
                        }
                    }).catch(() => { })
                },
                removeTrigger(row) {
                    this.$confirm('Are you going to remove the trigger?', 'Notice', {
                        confirmButtonText: 'Yes',
                        cancelButtonText: 'Cancel',
                        type: 'warning'
                    }).then(async () => {
                        const { status: status } = await this.$http.delete(`api/services/quartz/Triggers/${row.triggerName}/${row.triggerGroup}`);
                        if (status === 200) {
                            this.$message({
                                type: 'success',
                                message: 'Remove Successfully!',
                                offset: 60
                            });
                            var triggerData = this.scheduledTriggerData
                            this.scheduledTriggerData = triggerData.filter(x => x.triggerName !== row.triggerName);
                            this.getTriggerData();
                        } else {
                            this.$message({ type: 'error', message: 'Remove Trigger Failed!', offset: 60 });
                        }
                    }).catch(() => { })
                },
                scheduleJob() {
                    this.isRescheduleJob = false;
                    this.checkedDaysInWeek = [];
                    this.checkedDaysInMonth = [];
                    this.dailyCheck = false;
                    this.scheduleTime = null;
                    this.cronTab= 'daily';
                    this.scheduledJobData = {
                        jobGroup: 'DEFAULT',
                        triggerGroup: 'DEFAULT',
                        cronExpression: ''
                    };
                    this.scheduleJobDialogVisible = true;
                },
                async saveScheduleJob() {
                    const { status: status } = await this.$http.post('/api/services/quartz/Jobs/schedulejob', {
                        jobGroup: this.scheduledJobData.jobGroup,
                        jobDescription: this.scheduledJobData.jobDescription,
                        jobData: this.scheduledJobData.jobData,
                        triggerGroup: this.scheduledJobData.triggerGroup,
                        triggerDescription: this.scheduledJobData.triggerDescription,
                        cronExpression: this.scheduledJobData.cronExpression
                    });
                    if (status === 200) {
                        this.$message({ type: 'success', message: 'Schedule Job Successfully!', offset: 60 });
                        this.getJobData();
                        this.getTriggerData();
                        this.scheduleJobDialogVisible = false;
                    } else {
                        this.$message({ type: 'error', message: 'Schedule Job Failed!', offset: 60 });
                    }
                },
                reschedule() {
                    this.isRescheduleJob = true;
                    this.checkedDaysInWeek = [];
                    this.checkedDaysInMonth = [];
                    this.dailyCheck = false;
                    this.scheduleTime = null;
                    this.cronTab = 'daily';
                    var selectedJobData = this.$refs.jobDataTable.selection
                    if (selectedJobData.length !== 1) {
                        this.$message({ type: 'error', message: 'Please select one of the job data.', offset: 60 });
                        return;
                    }
                    var row = selectedJobData[0]
                    var idx = this.triggerData.findIndex(x => x.jobName === row.jobName);

                    var trigger = {}
                    if (idx >= 0) {
                        trigger = this.triggerData[idx];
                    }

                    this.scheduledJobData = {
                        jobName: row.jobName,
                        jobGroup: row.jobGroup,
                        jobDescription: row.description,
                        jobData: row.jobData,
                        triggerName: trigger.triggerName,
                        triggerGroup: trigger.triggerGroup,
                        triggerDescription: trigger.description,
                        cronExpression: trigger.cronExpression
                    };
                    this.rescheduleDialogVisible = true;
                },
                async doRescheduleJob() {

                    const { status: status } = await this.$http.put(
                        `/api/services/quartz/Triggers/${this.scheduledJobData.triggerName}/${this.scheduledJobData.triggerGroup}`,
                        {
                            jobName: this.scheduledJobData.jobName,
                            jobGroup: this.scheduledJobData.jobGroup,
                            description: this.scheduledJobData.triggerDescription,
                            cronExpression: this.scheduledJobData.cronExpression
                        });

                    if (status === 200) {
                        this.getJobData();
                        this.getTriggerData();
                        this.rescheduleDialogVisible = false;
                    } else {
                        this.$message({ type: 'error', message: 'Reschedule Job Failed!', offset: 60 });
                    }
                }
            }
        })
    </script>
}